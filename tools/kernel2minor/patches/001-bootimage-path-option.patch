--- a/kernel2minor.c
+++ b/kernel2minor.c
@@ -38,6 +38,7 @@ static int info_block_size = 0;
 #define INFO_BLOCK_VAR_LEN 8
 //–∏–º—è —Ñ–∞–π–ª–∞ —è–¥—Ä–∞ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–∞ yaffs2
 #define KERNEl_YAFFS_FILE_NAME "kernel"
+#define BOOTIMAGE_YAFFS_FILE_NAME "bootimage"
 /* —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å—á–∏—Ç–∞–µ—Ç—Å—è ECC. –¥–ª—è yaffs2 —ç—Ç–æ 256 */
 #define ECC_BLOCK_SIZE 256
 
@@ -56,6 +57,7 @@ int verbose = 0; //–≥–æ–≤–æ—Ä–ª–∏–≤–æ—Å—
 //–¥–æ–±–∞–≤–∏—Ç—å –∫ –æ–±—Ä–∞–∑—É –±–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–ø–∏—Å—ã–≤–∞—é—â–∏–º–∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã(—Ä–∞–∑–º–µ—Ä, blocksize, chunksize, etc...)
 int add_image_info_block = 0; //—ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∞–ª—å—â–∏–∫–æ–º openwrt(–¥–ª—è nand —Ñ–ª–µ—à–µ–π)
 int align_size = 0; //–Ω—É–∂–Ω–æ –¥–ª—è openwrt-—à–Ω–æ–≥–æ sysupgrade-–∞. —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –Ω–∞–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º(sysupgrade-–æ–º)
+int use_bootimage = 0;
 
 //–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã yaffs2. —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ñ-–µ–π calc_needed_vars.
 static int chunk_data_size = 0;
@@ -83,6 +85,7 @@ void print_help(void){
       "-s", "FLASH Unit(Chunk) size", chunk_size_str,
       "-i", "Add image info block", add_image_info_block ? info_block_size_str : "No",
       "-p", "Platform name", platform_name_str,
+      "-b", "Use \"bootimage\" for packed file name", "",
       "-v", "Verbose output", verbose ? "Yes" : "No",
       "-h", "Show help and exit", "" };
   printf("Version := %s\nUsage:\n", PROGRAM_VERSION);
@@ -365,7 +368,10 @@ int fill_and_write_obj_header(int r, int
   memset(buf, 0xff, buf_size);
   verb_printf("%u: Writing chunk = 0 for obj(%u) HEADER, seq = %u\n", (*n)++, obj_id, seq_number);
   //–∑–∞–ø–æ–ª–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä–µ–∫—Ç–∞
-  cook_object_header(buf, KERNEl_YAFFS_FILE_NAME);
+  if (use_bootimage)
+  	cook_object_header(buf, BOOTIMAGE_YAFFS_FILE_NAME);
+  else
+  	cook_object_header(buf, KERNEl_YAFFS_FILE_NAME);
   //–∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ tags + ecc(oob part)
   cook_tags(buf, buf_size, chunk_data_size, obj_id, seq_number, chunk_id, n_bytes, 1);
   len = write(r, buf, buf_size);
@@ -592,7 +598,7 @@ int main(int argc, char *argv[]){
   int r = 0;
   int ch; //–¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   //–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
-  while( (ch = getopt(argc, argv, "k:r:s:i:p:cevh")) != -1){
+  while( (ch = getopt(argc, argv, "k:r:s:i:p:cebvh")) != -1){
     switch(ch){
       case 'k': snprintf(kernel_file, sizeof(kernel_file) - 1, "%s", optarg); break;
       case 'r': snprintf(res_file, sizeof(res_file) - 1, "%s", optarg); break;
@@ -601,6 +607,7 @@ int main(int argc, char *argv[]){
       case 's': chunk_size = atoi(optarg); break;
       case 'i': add_image_info_block = 1; align_size = atoi(optarg); break;
       case 'p': strncpy(platform_name, optarg, sizeof(platform_name)); break;
+      case 'b': use_bootimage = 1; break;
       case 'v': verbose = 1; break;
       case 'h': print_help(); exit(0); break;
     }
